/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package iams_g10;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;

/**
 *
 * @author Tasnima Hamid
 */
public class employee_info extends javax.swing.JFrame {

    /**
     * Creates new form employee_info
     */
    public employee_info() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Username", "Email", "Name", "Employee Position"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(129, 129, 129))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(employee_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(employee_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(employee_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(employee_info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new employee_info().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}

/**                /**try{
                    Connection conn = dbcon.getConnection();
                    String query4 = "SELECT `id`, `username`, `mail`, `name`, `emp_position` FROM `registered_users`";

                    Statement state = (Statement) conn.createStatement();
                    
                    ResultSet res = state.executeQuery(query4);
                    //ResultSetMetaData res = res1.getMetaData();
                    DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    model.setRowCount(1);
                    
                    /**int cols = res.getColumnCount();
                    String[] colName = new String[cols];
                    for(int i=0; i <cols; i++)
                        colName[i] = res.getColumnName(i+1);
                    model.setColumnIdentifiers(colName);
                    //String ID, Username, Email, Name, Employee_position;
                    
                    while(res.next()){
                        int id = res.getInt("id");
                        String user = res.getString("username");
                        String name = res.getString("name");
                        String mail = res.getString("mail");
                        String emp_pos = res.getString("emp_position");
                        Object[] row = {id, user, name, mail, emp_pos};
                        model.addRow(row);
                       
                    }
                    
                    /**
                     * //String columns[] = {"ID", "Username", "Email", "Name", "Employee_position"};
                    String data[][] = new String[12][5];

                    int i = 0;
                    while(res.next()){
                        int id = res.getInt("id");
                        String user = res.getString("username");
                        String name = res.getString("name");
                        String mail = res.getString("mail");
                        String emp_pos = res.getString("emp_position");
                        data[i][0] = id + "";
                        data[i][1] = user;
                        data[i][2] = name;
                        data[i][3] = mail;
                        data[i][4] = emp_pos;
                        i++;
                       
                    
                    
                    
                    //DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    //model.addRow(data);

                    conn.close();
                    System.out.println("Connection Terminated");
                    }
                catch(ClassNotFoundException | SQLException e){
                    System.out.println(e.toString());
                }
            }
                
                
                try{
                    Connection conn = dbcon.getConnection();
                    String query4 = "SELECT `id`, `username`, `mail`, `name`, `emp_position` FROM `registered_users`";

                    Statement state = (Statement) conn.createStatement();
                    ResultSet res = state.executeQuery(query4);

                    String columns[] = {"ID", "Username", "Email", "Name", "Employee_position"};
                    String data[][] = new String[20][5];

                    int i = 0;
                    while(res.next()){
                        int id = res.getInt("id");
                        String user = res.getString("username");
                        String name = res.getString("name");
                        String mail = res.getString("mail");
                        String emp_pos = res.getString("emp_position");
                        data[i][0] = id + "";
                        data[i][1] = user;
                        data[i][2] = name;
                        data[i][3] = mail;
                        data[i][4] = emp_pos;
                        i++;
                    }

                    DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
                    model.addRow(data);

                    conn.close();
                    System.out.println("Connection Terminated");
                    }
                catch(ClassNotFoundException | SQLException e){
                    System.out.println(e.toString());
                }
**/